#!/usr/bin/env python
# encoding: utf-8
# Copyright (c) 2013-2018 GomSpace A/S. All rights reserved.

import gs_gcc
import gs_doc
import gs_dist
from waflib.Build import BuildContext

APPNAME = 'param'


def options(ctx):
    ctx.load('gs_gcc gs_doc')
    gs_gcc.gs_recurse(ctx)

    gr = ctx.add_option_group('libparam options')
    gr.add_option('--param-max-tables', action='store', default='20', help='Set max table instances')
    gr.add_option('--param-disable-lock', action='store_true', help='Disable table locking')
#####################################################################################################
    gr.add_option('--mutation-opt', type=str, help='set mutation') #added by FAQAS
    gr.add_option('--singleton', type=str, help='singleton?') #added by FAQAS
#####################################################################################################

def configure(ctx):
    ctx.load('gs_gcc gs_doc')

    ctx.env.append_unique('USE_PARAM', ['param_client', 'gscsp', 'util'])

    ctx.env.append_unique('FILES_PARAM', ['src/**/*.c'])
#####################################################################################################
    ctx.env.append_unique('CFLAGS', ["-DMUTATIONOPT=" + ctx.options.mutation_opt]) #added by FAQAS

    ctx.env.append_unique('CFLAGS', ["-D_FAQAS_SINGLETON_FM=" + ctx.options.singleton]) #added by FAQAS
####################################################################################################
    ctx.gs_add_doxygen(example=['tst'], exclude=['*/include/deprecated/param/*'])

    # Max number of tables
    ctx.env.append_unique('DEFINES_PARAM', 'GS_PARAM_MAX_TABLES=' + str(int(ctx.options.param_max_tables)))
    ctx.env.append_unique('DEFINES_PARAM',
                          'GS_PARAM_DISABLE_LOCK=' + str(int(1 if ctx.options.param_disable_lock else 0)))

    gs_gcc.gs_recurse(ctx)

def build(ctx):
    gs_gcc.gs_recurse(ctx)

    public_include = ctx.gs_include(name=APPNAME,
                                    includes=['include', 'include/deprecated'])

    ctx.gs_objects(source=ctx.path.ant_glob(ctx.env.FILES_PARAM),
                   target=APPNAME,
                   defines=ctx.env.DEFINES_PARAM,
                   use=ctx.env.USE_PARAM + [public_include])

    ctx.gs_shlib(source=ctx.path.ant_glob(ctx.env.FILES_PARAM),
    #ctx.gs_stlib(source=ctx.path.ant_glob(ctx.env.FILES_PARAM),
                 target=APPNAME,
                 defines=ctx.env.DEFINES_PARAM,
                 gs_use_shlib=ctx.env.USE_PARAM + [public_include])


def doc(ctx):
    gs_doc.library(ctx, keyvalues={
        'gs_prod_name': 'lib'+APPNAME,
        'gs_prod_desc': 'Parameter System',
    })


class Doc(BuildContext):
    cmd = fun = 'doc'


def gs_dist(ctx):
    ctx.add_default_files(source_module=True)
    gs_gcc.gs_recurse(ctx)
