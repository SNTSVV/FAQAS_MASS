#!/usr/bin/env python

import os, sys

CWD = os.path.dirname(os.path.abspath(__file__))
from bashUtil import executeCommand
from irUtil import getSummaryDir, run


def performOptimization(command, out_file):
    print("executing the opt command: " + command)
    out, err, my_time = executeCommand(command.split())
    if err:
        # remove the generated file
        try:
            os.remove(out_file)
        except OSError:
            pass

        # log the failure
        print('Opt Failed To Mutate:' + out_file + '\n')
        print('ERROR IS:' + err)
        return -1
    return 1


def opt(optimization, args, bitcode_file, opt_command):
    if optimization == 'replace_const':
        inst_count = args[0]
        op_count = args[1]
        val = args[2]
        out_file = bitcode_file
        command = opt_command + " -icrmutate -mutation_loc=" + inst_count + " -mutation_op_loc=" + op_count + " -mutation_val=" + val + " " + bitcode_file + " -o " + out_file
    elif optimization == 'replace_binary_op':
        inst_count = args[0]
        op_type = args[1]
        val = args[2]
        out_file = bitcode_file
        command = opt_command + " -swapBinaryOperators -mutation_loc=" + inst_count + " -icmp_pred=" + val + " -mutation_op=" + val + " " + bitcode_file + " -o " + out_file

    return performOptimization(command, out_file)


def getMutationRequest():
    path = os.path.join(getSummaryDir(), "mutation_request.txt")
    print("trying to find the file: " + path)
    if os.path.isfile(path):
        print("yes we found the file")
        with open(path, 'r') as mut_file:
            mutation = mut_file.readline().strip()
            return mutation
    else:
        return ""


def mutateIfRequested(bitcode_file, src_file, opt_command, dummy):  # Using a dummy variable holder for last parameter for consistency
    mutation = getMutationRequest()
    print("requested mutation is: " + mutation)
    if not mutation:
        return
    mutation_parts = mutation.split(":")
    files = mutation_parts[0].split("+")
    print("requested bitcode file: " + files[0] + " and src file is: " + files[1])
    if bitcode_file != files[0] or src_file != files[1]:
        print("oh no, no mutation requested for bitcode: " + bitcode_file + " and the src file: " + src_file + ", reading " + files[0] + " and " + files[1])
        return
    print("MUTATING...")
    mutation_type = mutation_parts[1]
    actual_mutation = ":".join(mutation_parts[2:])
    info = actual_mutation.split(':')
    if mutation_type == "binaryOp":
        print("the info for binaryOp is: " + str(info))
        inst_count = info[0]
        op_type = info[1]
        value = info[2]
        if opt('replace_binary_op', [inst_count, op_type, value], bitcode_file, opt_command) == -1:
            print("OPTIMUTE: MUTATION FAILED TO APPLY")
    else: # it's a replace constant
        print("the info for const is: " + str(info))
        inst_count = info[0]
        op_count = info[1]
        value = info[3]
        if opt('replace_const', [inst_count, op_count, value], bitcode_file, opt_command) == -1:
            print("OPTIMUTE: MUTATION FAILED TO APPLY")
    

def main():
    run("mutation", mutateIfRequested)

if __name__ == '__main__':
    main()
